name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        compiler: [gcc, clang]
        exclude:
          - os: windows-latest
            compiler: clang
        include:
          - os: windows-latest
            compiler: msvc

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup C++ (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          sudo apt-get install -y build-essential
        else
          sudo apt-get install -y clang
        fi

    - name: Setup C++ (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          brew install gcc
        fi
        # Clang is default on macOS

    - name: Setup MSVC (Windows)
      if: matrix.os == 'windows-latest' && matrix.compiler == 'msvc'
      uses: microsoft/setup-msbuild@v1.1

    - name: Setup MinGW (Windows)
      if: matrix.os == 'windows-latest' && matrix.compiler == 'gcc'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-make

    - name: Build with CMake (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir build
        cd build
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          export CC=gcc
          export CXX=g++
        else
          export CC=clang
          export CXX=clang++
        fi
        cmake ..
        cmake --build . --config Release

    - name: Build with CMake (Windows MSVC)
      if: matrix.os == 'windows-latest' && matrix.compiler == 'msvc'
      run: |
        mkdir build
        cd build
        cmake ..
        cmake --build . --config Release

    - name: Build with CMake (Windows MinGW)
      if: matrix.os == 'windows-latest' && matrix.compiler == 'gcc'
      shell: msys2 {0}
      run: |
        mkdir build
        cd build
        cmake .. -G "MinGW Makefiles"
        cmake --build . --config Release

    - name: Build with Make (Linux/macOS fallback)
      if: matrix.os != 'windows-latest'
      run: |
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          export CXX=g++
        else
          export CXX=clang++
        fi
        make

    - name: Test server startup (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        timeout 10s ./build/bin/CppRestAPI || [ $? -eq 124 ]

    - name: Test server startup (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        $job = Start-Job -ScriptBlock { .\build\bin\CppRestAPI.exe }
        Start-Sleep -Seconds 5
        Stop-Job $job
        Remove-Job $job

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: cpp-rest-api-${{ matrix.os }}-${{ matrix.compiler }}
        path: |
          build/bin/
          !build/bin/*.pdb

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install tools
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-format

    - name: Run cppcheck
      run: |
        cppcheck --enable=all --std=c++17 --suppress=missingIncludeSystem src/ || true

    - name: Check code formatting
      run: |
        find src/ -name "*.cpp" -o -name "*.hpp" | xargs clang-format -style=file --dry-run --Werror || true

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check documentation files
      run: |
        # Check if all required documentation exists
        test -f README.md
        test -f CONTRIBUTING.md
        test -f CHANGELOG.md
        test -f LICENSE
        
        # Check README has basic sections
        grep -q "# C++ REST API Application" README.md
        grep -q "## Features" README.md || grep -q "## ðŸš€ Quick Start" README.md
        grep -q "## Building" README.md || grep -q "## Requirements" README.md
        
        echo "Documentation check passed!"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security checks
      run: |
        # Check for common security issues in C++
        echo "Running basic security checks..."
        
        # Check for potential buffer overflows
        ! grep -r "strcpy\|strcat\|sprintf\|gets" src/ || (echo "Found potentially unsafe functions" && exit 1)
        
        # Check for TODO/FIXME security notes
        ! grep -r "TODO.*security\|FIXME.*security\|XXX.*security" src/ || (echo "Found security TODOs" && exit 1)
        
        echo "Basic security checks passed!"

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build project
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        make

    - name: Install test dependencies
      run: |
        sudo apt-get install -y curl jq

    - name: Start server in background
      run: |
        ./build/bin/CppRestAPI &
        SERVER_PID=$!
        echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
        sleep 3

    - name: Run API tests
      run: |
        chmod +x examples/test_api.sh
        ./examples/test_api.sh

    - name: Stop server
      run: |
        if [ ! -z "$SERVER_PID" ]; then
          kill $SERVER_PID || true
        fi

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate tag
      id: tag
      run: |
        # Generate tag based on date and commit
        TAG="v$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)"
        echo "tag=$TAG" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        release_name: Release ${{ steps.tag.outputs.tag }}
        body: |
          Automated release of C++ REST API
          
          Changes:
          - Latest code from main branch
          - All tests passing
          - Cross-platform compatibility verified
        draft: false
        prerelease: false